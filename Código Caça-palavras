#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define LINHAS 10
#define COLUNAS 10
#define PALAVRAS 7
#define LETRAS 20

typedef struct {
    char palavra[LETRAS];
    int xIncial;
    int yInicial;
    int xFinal;
    int yFinal;
}Encontradas;

int transformarEmMatriz(char[], char[][COLUNAS]);
void imprimirMatriz(char[][COLUNAS]);
int localizaPalavra(char[][COLUNAS], char[], Encontradas*, int*);
void imprimePalavras(Encontradas*, int*);

int main() {
    char grade[] = "SAPAACAVAAAAPADAVUUJTAPAAPASONASJAVMVARAJPOATRRASRAOJALORAAAOPAOMOUPSLPAPPMVAUAAOATALSVAPAAOTTRAASOP";
    char matriz[LINHAS][COLUNAS];
    char palavras[PALAVRAS][LETRAS] = {
        "SAPATO",
        "UVA",
        "LARANJA",
        "PAO",
        "AMORA",
        "SAPO",
        "SOPA"
    };
    
    Encontradas encontradas[PALAVRAS];
    int contadorEncontradas = 0;

    if(transformarEmMatriz(grade, matriz) == 1){
        
        imprimirMatriz(matriz);

        printf("\n");
    
        char palavra[LETRAS];
        printf("Digite a palavra que deseja buscar: ");
        scanf("%s", palavra);
        
        int palavraTam = strlen(palavra);
        
        for (int i = 0; i < palavraTam; i++) {
            palavra[i] = toupper(palavra[i]);
        }
        
        localizaPalavra(matriz, palavra, encontradas, &contadorEncontradas);
        
        //Localizar todas as palavras
        printf("\nTodas as palavras da lista são: \n");
        
        for(int i=0; i<PALAVRAS; i++){
            ;
            if(localizaPalavra(matriz, palavras[i], encontradas, &contadorEncontradas) == 0){
                strcpy(encontradas[contadorEncontradas].palavra, palavras[i]);
                encontradas[contadorEncontradas].xIncial = 0;
                encontradas[contadorEncontradas].yInicial = 0;
                encontradas[contadorEncontradas].xFinal = 0;
                encontradas[contadorEncontradas].yFinal = 0;
                contadorEncontradas++;
            }
        }
        
        imprimePalavras(encontradas, &contadorEncontradas);
    } else {
        printf("Por favor, insira uma matriz válida (%d x %d)", LINHAS, COLUNAS);
    }

    return 0;
}

int transformarEmMatriz(char* grade, char matriz[LINHAS][COLUNAS]) {
    int tam = strlen(grade);
    
    if(LINHAS * COLUNAS == tam){
        int k = 0;
        for (int i = 0; i < LINHAS; i++) {
            for (int j = 0; j < COLUNAS; j++) {
                matriz[i][j] = grade[k++];
            }
        }
        return 1;
    } else {
        return 0;   
    }
}

void imprimirMatriz(char matriz[LINHAS][COLUNAS]) {
    for (int i = 0; i < LINHAS; i++) {
        for (int j = 0; j < COLUNAS; j++) {
            printf("%c ", matriz[i][j]);
        }
        printf("\n");
    }
}

int localizaPalavra(char matriz[LINHAS][COLUNAS], char* palavra, Encontradas* encontradas, int* contadorEncontradas) {
    int tam = strlen(palavra);
    int linha_ini, coluna_ini, linha_fim, coluna_fim;
    int encontrou = 0;

    // Busca na vertical (de cima para baixo)
    for (int i = 0; i <= LINHAS - tam; i++) {
        for (int j = 0; j < COLUNAS; j++) {
            if (matriz[i][j] == palavra[0]) {
                int k;
                for (k = 1; k < tam; k++) {
                    if (matriz[i + k][j] != palavra[k]) {
                        break;
                    }
                }
                if (k == tam) {
                    strcpy(encontradas[*contadorEncontradas].palavra, palavra);
                    encontradas[*contadorEncontradas].xIncial = i;
                    encontradas[*contadorEncontradas].yInicial = j;
                    encontradas[*contadorEncontradas].xFinal = i + tam - 1;
                    encontradas[*contadorEncontradas].yFinal = j;
                    (*contadorEncontradas)++;
                    encontrou = 1;
                    break;
                }
            }
        }
        if (encontrou) {
            break;
        }
    }

    if (!encontrou) {
        // Busca na vertical (de baixo para cima)
        for (int i = LINHAS - 1; i >= tam - 1; i--) {
            for (int j = 0; j < COLUNAS; j++) {
                if (matriz[i][j] == palavra[0]) {
                    int k;
                    for (k = 1; k < tam; k++) {
                        if (matriz[i - k][j] != palavra[k]) {
                            break;
                        }
                    }
                    if (k == tam) {
                        strcpy(encontradas[*contadorEncontradas].palavra, palavra);
                        encontradas[*contadorEncontradas].xIncial = i;
                        encontradas[*contadorEncontradas].yInicial = j;
                        encontradas[*contadorEncontradas].xFinal = i - tam + 1;
                        encontradas[*contadorEncontradas].yFinal = j;
                        (*contadorEncontradas)++;
                        encontrou = 1;
                        break;
                    }
                }
            }
            if (encontrou) {
                break;
            }
        }
    }

    if (!encontrou) {
        // Busca na horizontal (da esquerda para a direita)
        for (int i = 0; i < LINHAS; i++) {
            for (int j = 0; j <= COLUNAS - tam; j++) {
                if (matriz[i][j] == palavra[0]) {
                    int k;
                    for (k = 1; k < tam; k++) {
                        if (matriz[i][j + k] != palavra[k]) {
                            break;
                        }
                    }
                    if (k == tam) {
                        strcpy(encontradas[*contadorEncontradas].palavra, palavra);
                        encontradas[*contadorEncontradas].xIncial = i;
                        encontradas[*contadorEncontradas].yInicial = j;
                        encontradas[*contadorEncontradas].xFinal = i;
                        encontradas[*contadorEncontradas].yFinal = j + tam - 1;
                        (*contadorEncontradas)++;
                        encontrou = 1;
                        break;
                    }
                }
            }
            if (encontrou) {
                break;
            }
        }
    }

    if (!encontrou) {
        // Busca na horizontal (da direita para a esquerda)
        for (int i = 0; i < LINHAS; i++) {
            for (int j = COLUNAS - 1; j >= tam - 1; j--) {
                if (matriz[i][j] == palavra[0]) {
                    int k;
                    for (k = 1; k < tam; k++) {
                        if (matriz[i][j - k] != palavra[k]) {
                            break;
                        }
                    }
                    if (k == tam) {
                        strcpy(encontradas[*contadorEncontradas].palavra, palavra);
                        encontradas[*contadorEncontradas].xIncial = i;
                        encontradas[*contadorEncontradas].yInicial = j;
                        encontradas[*contadorEncontradas].xFinal = i;
                        encontradas[*contadorEncontradas].yFinal = j - tam + 1;
                        (*contadorEncontradas)++;
                        encontrou = 1;
                        break;
                    }
                }
            }
            if (encontrou) {
                break;
            }
        }
    }

    if (!encontrou) {
        // Busca na diagonal principal (de cima para baixo)
        for (int i = 0; i <= LINHAS - tam; i++) {
            for (int j = 0; j <= COLUNAS - tam; j++) {
                if (matriz[i][j] == palavra[0]) {
                    int k;
                    for (k = 1; k < tam; k++) {
                        if (matriz[i + k][j + k] != palavra[k]) {
                            break;
                        }
                    }
                    if (k == tam) {
                        strcpy(encontradas[*contadorEncontradas].palavra, palavra);
                        encontradas[*contadorEncontradas].xIncial = i;
                        encontradas[*contadorEncontradas].yInicial = j;
                        encontradas[*contadorEncontradas].xFinal = i + tam - 1;
                        encontradas[*contadorEncontradas].yFinal = j + tam - 1;
                        (*contadorEncontradas)++;
                        encontrou = 1;
                        break;
                    }
                }
            }
            if (encontrou) {
                break;
            }
        }
    }

    if (!encontrou) {
        // Busca na diagonal principal (de baixo para cima)
        for (int i = LINHAS - 1; i >= tam - 1; i--) {
            for (int j = COLUNAS - 1; j >= tam - 1; j--) {
                if (matriz[i][j] == palavra[0]) {
                    int k;
                    for (k = 1; k < tam; k++) {
                        if (matriz[i - k][j - k] != palavra[k]) {
                            break;
                        }
                    }
                    if (k == tam) {
                        strcpy(encontradas[*contadorEncontradas].palavra, palavra);
                        encontradas[*contadorEncontradas].xIncial = i;
                        encontradas[*contadorEncontradas].yInicial = j;
                        encontradas[*contadorEncontradas].xFinal = i - tam + 1;
                        encontradas[*contadorEncontradas].yFinal = j - tam + 1;
                        (*contadorEncontradas)++;
                        encontrou = 1;
                        break;
                    }
                }
            }
            if (encontrou) {
                break;
            }
        }
    }

    if (!encontrou) {
        // Busca na diagonal secundária (de cima para baixo)
        for (int i = 0; i <= LINHAS - tam; i++) {
            for (int j = tam - 1; j < COLUNAS; j++) {
                if (matriz[i][j] == palavra[0]) {
                    int k;
                    for (k = 1; k < tam; k++) {
                        if (matriz[i + k][j - k] != palavra[k]) {
                            break;
                        }
                    }
                    if (k == tam) {
                        strcpy(encontradas[*contadorEncontradas].palavra, palavra);
                        encontradas[*contadorEncontradas].xIncial = i;
                        encontradas[*contadorEncontradas].yInicial = j;
                        encontradas[*contadorEncontradas].xFinal = i + tam - 1;
                        encontradas[*contadorEncontradas].yFinal = j - tam + 1;
                        (*contadorEncontradas)++;
                        encontrou = 1;
                        break;
                    }
                }
            }
            if (encontrou) {
                break;
            }
        }
    }

    if (!encontrou) {
        // Busca na diagonal secundária (de baixo para cima)
        for (int i = LINHAS - 1; i >= tam - 1; i--) {
            for (int j = COLUNAS - tam; j >= 0; j--) {
                if (matriz[i][j] == palavra[0]) {
                    int k;
                    for (k = 1; k < tam; k++) {
                        if (matriz[i - k][j + k] != palavra[k]) {
                            break;
                        }
                    }
                    if (k == tam) {
                        strcpy(encontradas[*contadorEncontradas].palavra, palavra);
                        encontradas[*contadorEncontradas].xIncial = i;
                        encontradas[*contadorEncontradas].yInicial = j;
                        encontradas[*contadorEncontradas].xFinal = i - tam + 1;
                        encontradas[*contadorEncontradas].yFinal = j + tam - 1;
                        (*contadorEncontradas)++;
                        encontrou = 1;
                        break;
                    }
                }
            }
            if (encontrou) {
                break;
            }
        }
    }

    if (encontrou) {
        return 1;
    } else {
        return 0;
    }
}

void imprimePalavras(Encontradas* encontradas, int* contadorEncontradas){
    for(int i=0; i < *contadorEncontradas; i++){
        printf("%s - %d, %d, %d, %d\n", 
            encontradas[i].palavra,
            encontradas[i].xIncial,
            encontradas[i].yInicial,
            encontradas[i].xFinal,
            encontradas[i].yFinal
        );
    }
}
